/* The following code was generated by JFlex 1.4.1 on 20/02/07 11.23 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 20/02/07 11.23 from the specification file
 * <tt>D:/_AGDIR/Specialistica/Materie/Linguaggi e traduttori/Laboratorio/TESINA/scanner.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comment = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  0,  0,  0,  0,  0,  0,  0,  0, 49,  0, 46,  0, 44, 48, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 47, 45,  0,  0,  0,  0, 
     0, 35, 17, 29, 24,  7, 22,  7,  7, 14,  7,  7, 30,  7,  7,  7, 
     7,  7, 36,  8,  7,  7,  7,  7,  7,  7,  7, 41,  0, 42,  0,  6, 
     0, 20, 16, 28, 23, 15, 21, 13, 27, 11,  5, 38, 19, 37, 12, 18, 
    32, 34, 10, 26,  9, 25, 33,  5,  5, 31,  5, 40, 43, 39,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\1\3\1\4\2\5\4\3\1\5"+
    "\1\3\1\5\4\3\1\5\1\3\1\5\2\3\2\5"+
    "\1\3\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\2\0\1\1\1\2\1\3\1\4\2\5"+
    "\4\3\1\5\1\3\1\5\4\3\1\5\1\3\1\5"+
    "\2\3\2\5\1\3\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\3\1\4\5\4\3\1\16"+
    "\1\3\1\5\2\3\2\5\5\3\1\5\1\3\1\5"+
    "\4\3\3\5\1\3\2\5\1\17\1\20\4\5\4\3"+
    "\1\16\1\3\1\5\2\3\2\5\5\3\1\5\1\3"+
    "\1\5\4\3\3\5\1\3\2\5\1\17\1\1\1\21"+
    "\4\5\4\3\1\22\1\5\2\3\2\5\5\3\1\5"+
    "\1\3\2\5\4\3\4\5\2\3\5\5\4\3\1\22"+
    "\1\5\2\3\2\5\5\3\1\5\1\3\2\5\4\3"+
    "\4\5\2\3\4\5\2\3\1\5\1\3\1\5\1\22"+
    "\4\3\2\5\1\3\1\16\1\5\3\3\4\5\2\3"+
    "\1\5\1\3\1\5\1\22\4\3\2\5\1\3\1\16"+
    "\1\5\3\3\3\5\2\3\1\5\1\3\1\5\3\3"+
    "\1\5\1\3\1\5\3\3\2\5\2\3\1\5\1\3"+
    "\1\5\3\3\1\5\1\3\1\5\3\3\1\5\1\3"+
    "\1\5\1\3\1\5\1\3\1\5\2\3\1\5\1\3"+
    "\1\5\1\3\1\5\1\3\1\5\4\3\2\5\4\3"+
    "\2\5\2\3\1\5\1\3\1\5\1\3\10\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\226\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0672\0\u0672\0\u0672\0\u0672"+
    "\0\u0672\0\u0672\0\u0672\0\u0672\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u012c"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\226\0\226\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u06d6\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u0672\0\u18ce\0\226\0\u1900\0\u1932"+
    "\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u012c\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0"+
    "\0\u06d6\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de"+
    "\0\u2710\0\u2742\0\u0190\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\u0190\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a"+
    "\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u073a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88"+
    "\0\u073a\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6"+
    "\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76"+
    "\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106"+
    "\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296"+
    "\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426"+
    "\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6"+
    "\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746"+
    "\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6"+
    "\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66"+
    "\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\7\1\17\1\7"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\7\1\31\1\7\1\32\1\33\1\34\1\7"+
    "\1\35\2\7\1\36\1\37\2\7\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\0"+
    "\4\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\54\1\64\1\54\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\54\1\76"+
    "\1\54\1\77\1\100\1\101\1\54\1\102\2\54\1\103"+
    "\1\104\2\54\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\2\0\1\4\144\0"+
    "\1\5\62\0\1\6\42\7\17\0\43\7\13\0\47\10"+
    "\1\0\12\10\4\0\43\11\17\0\5\11\1\120\5\11"+
    "\1\121\2\11\1\122\10\11\1\123\13\11\17\0\20\7"+
    "\1\124\12\7\1\125\7\7\17\0\13\7\1\126\27\7"+
    "\17\0\10\7\1\127\12\7\1\130\17\7\17\0\20\7"+
    "\1\131\22\7\17\0\10\11\1\132\32\11\17\0\16\7"+
    "\1\133\14\7\1\134\7\7\17\0\16\11\1\135\14\11"+
    "\1\136\7\11\17\0\10\7\1\137\32\7\17\0\7\7"+
    "\1\140\6\7\1\141\24\7\17\0\5\7\1\142\35\7"+
    "\17\0\17\7\1\143\23\7\17\0\17\11\1\144\23\11"+
    "\17\0\16\7\1\145\24\7\17\0\16\11\1\146\24\11"+
    "\17\0\13\7\1\147\13\7\1\150\13\7\17\0\16\7"+
    "\1\151\10\7\1\152\13\7\17\0\16\11\1\153\10\11"+
    "\1\154\13\11\17\0\16\11\1\155\24\11\17\0\6\7"+
    "\1\156\34\7\17\0\11\11\1\157\31\11\17\0\16\11"+
    "\1\160\24\11\72\0\1\161\63\0\1\162\61\52\1\0"+
    "\4\52\1\53\42\54\12\52\1\0\4\52\43\54\12\52"+
    "\1\0\47\55\1\52\11\55\1\10\4\52\43\56\12\52"+
    "\1\0\4\52\5\56\1\163\5\56\1\164\2\56\1\165"+
    "\10\56\1\166\13\56\12\52\1\0\4\52\20\54\1\167"+
    "\12\54\1\170\7\54\12\52\1\0\4\52\13\54\1\171"+
    "\27\54\12\52\1\0\4\52\10\54\1\172\12\54\1\173"+
    "\17\54\12\52\1\0\4\52\20\54\1\174\22\54\12\52"+
    "\1\0\4\52\10\56\1\175\32\56\12\52\1\0\4\52"+
    "\16\54\1\176\14\54\1\177\7\54\12\52\1\0\4\52"+
    "\16\56\1\200\14\56\1\201\7\56\12\52\1\0\4\52"+
    "\10\54\1\202\32\54\12\52\1\0\4\52\7\54\1\203"+
    "\6\54\1\204\24\54\12\52\1\0\4\52\5\54\1\205"+
    "\35\54\12\52\1\0\4\52\17\54\1\206\23\54\12\52"+
    "\1\0\4\52\17\56\1\207\23\56\12\52\1\0\4\52"+
    "\16\54\1\210\24\54\12\52\1\0\4\52\16\56\1\211"+
    "\24\56\12\52\1\0\4\52\13\54\1\212\13\54\1\213"+
    "\13\54\12\52\1\0\4\52\16\54\1\214\10\54\1\215"+
    "\13\54\12\52\1\0\4\52\16\56\1\216\10\56\1\217"+
    "\13\56\12\52\1\0\4\52\16\56\1\220\24\56\12\52"+
    "\1\0\4\52\6\54\1\221\34\54\12\52\1\0\4\52"+
    "\11\56\1\222\31\56\12\52\1\0\4\52\16\56\1\223"+
    "\24\56\12\52\1\0\57\52\1\224\1\52\1\0\61\52"+
    "\1\162\60\225\1\226\1\117\4\0\6\11\1\227\34\11"+
    "\17\0\6\11\1\230\34\11\17\0\30\11\1\231\12\11"+
    "\17\0\16\11\1\232\24\11\17\0\26\7\1\233\14\7"+
    "\17\0\34\7\1\234\6\7\17\0\30\7\1\235\5\7"+
    "\1\236\4\7\17\0\5\7\1\237\35\7\17\0\41\7"+
    "\1\234\1\7\17\0\5\11\1\240\35\11\17\0\16\7"+
    "\1\241\24\7\17\0\5\7\1\242\35\7\17\0\16\11"+
    "\1\243\24\11\17\0\5\11\1\244\35\11\17\0\5\7"+
    "\1\245\35\7\17\0\26\7\1\246\14\7\17\0\10\7"+
    "\1\247\32\7\17\0\5\7\1\250\35\7\17\0\16\7"+
    "\1\251\24\7\17\0\16\11\1\252\24\11\17\0\25\7"+
    "\1\253\15\7\17\0\25\11\1\254\2\11\1\255\12\11"+
    "\17\0\10\7\1\256\32\7\17\0\16\7\1\257\24\7"+
    "\17\0\10\7\1\260\32\7\17\0\20\7\1\261\22\7"+
    "\17\0\23\11\1\262\15\11\1\263\1\11\17\0\20\11"+
    "\1\264\22\11\17\0\10\11\1\265\32\11\17\0\7\7"+
    "\1\266\6\7\1\267\24\7\17\0\13\11\1\270\27\11"+
    "\17\0\17\11\1\262\23\11\13\0\4\52\6\56\1\271"+
    "\34\56\12\52\1\0\4\52\6\56\1\272\34\56\12\52"+
    "\1\0\4\52\30\56\1\273\12\56\12\52\1\0\4\52"+
    "\16\56\1\274\24\56\12\52\1\0\4\52\26\54\1\275"+
    "\14\54\12\52\1\0\4\52\34\54\1\276\6\54\12\52"+
    "\1\0\4\52\30\54\1\277\5\54\1\300\4\54\12\52"+
    "\1\0\4\52\5\54\1\301\35\54\12\52\1\0\4\52"+
    "\41\54\1\276\1\54\12\52\1\0\4\52\5\56\1\302"+
    "\35\56\12\52\1\0\4\52\16\54\1\303\24\54\12\52"+
    "\1\0\4\52\5\54\1\304\35\54\12\52\1\0\4\52"+
    "\16\56\1\305\24\56\12\52\1\0\4\52\5\56\1\306"+
    "\35\56\12\52\1\0\4\52\5\54\1\307\35\54\12\52"+
    "\1\0\4\52\26\54\1\310\14\54\12\52\1\0\4\52"+
    "\10\54\1\311\32\54\12\52\1\0\4\52\5\54\1\312"+
    "\35\54\12\52\1\0\4\52\16\54\1\313\24\54\12\52"+
    "\1\0\4\52\16\56\1\314\24\56\12\52\1\0\4\52"+
    "\25\54\1\315\15\54\12\52\1\0\4\52\25\56\1\316"+
    "\2\56\1\317\12\56\12\52\1\0\4\52\10\54\1\320"+
    "\32\54\12\52\1\0\4\52\16\54\1\321\24\54\12\52"+
    "\1\0\4\52\10\54\1\322\32\54\12\52\1\0\4\52"+
    "\20\54\1\323\22\54\12\52\1\0\4\52\23\56\1\324"+
    "\15\56\1\325\1\56\12\52\1\0\4\52\20\56\1\326"+
    "\22\56\12\52\1\0\4\52\10\56\1\327\32\56\12\52"+
    "\1\0\4\52\7\54\1\330\6\54\1\331\24\54\12\52"+
    "\1\0\4\52\13\56\1\332\27\56\12\52\1\0\4\52"+
    "\17\56\1\324\23\56\12\52\1\0\60\225\6\0\7\11"+
    "\1\155\33\11\17\0\35\11\1\333\5\11\17\0\7\11"+
    "\1\334\33\11\17\0\6\11\1\335\34\11\17\0\42\7"+
    "\1\130\17\0\13\7\1\130\27\7\17\0\13\7\1\336"+
    "\27\7\17\0\25\7\1\337\15\7\17\0\13\11\1\340"+
    "\27\11\17\0\17\7\1\341\23\7\17\0\13\7\1\237"+
    "\27\7\17\0\17\11\1\342\23\11\17\0\13\11\1\343"+
    "\27\11\17\0\16\7\1\344\24\7\17\0\5\7\1\345"+
    "\35\7\17\0\11\7\1\237\31\7\17\0\6\7\1\346"+
    "\34\7\17\0\20\7\1\127\22\7\17\0\20\11\1\335"+
    "\22\11\17\0\14\7\1\347\26\7\17\0\14\11\1\350"+
    "\26\11\17\0\25\11\1\351\15\11\17\0\23\7\1\237"+
    "\17\7\17\0\6\7\1\127\34\7\17\0\5\7\1\352"+
    "\35\7\17\0\6\7\1\237\34\7\17\0\13\11\1\353"+
    "\27\11\17\0\41\11\1\354\1\11\17\0\6\11\1\343"+
    "\34\11\17\0\11\11\1\343\31\11\17\0\35\7\1\355"+
    "\5\7\17\0\5\7\1\356\27\7\1\357\5\7\17\0"+
    "\10\11\1\360\32\11\13\0\4\52\7\56\1\220\33\56"+
    "\12\52\1\0\4\52\35\56\1\361\5\56\12\52\1\0"+
    "\4\52\7\56\1\362\33\56\12\52\1\0\4\52\6\56"+
    "\1\363\34\56\12\52\1\0\4\52\42\54\1\173\12\52"+
    "\1\0\4\52\13\54\1\173\27\54\12\52\1\0\4\52"+
    "\13\54\1\364\27\54\12\52\1\0\4\52\25\54\1\365"+
    "\15\54\12\52\1\0\4\52\13\56\1\366\27\56\12\52"+
    "\1\0\4\52\17\54\1\367\23\54\12\52\1\0\4\52"+
    "\13\54\1\301\27\54\12\52\1\0\4\52\17\56\1\370"+
    "\23\56\12\52\1\0\4\52\13\56\1\371\27\56\12\52"+
    "\1\0\4\52\16\54\1\372\24\54\12\52\1\0\4\52"+
    "\5\54\1\373\35\54\12\52\1\0\4\52\11\54\1\301"+
    "\31\54\12\52\1\0\4\52\6\54\1\374\34\54\12\52"+
    "\1\0\4\52\20\54\1\172\22\54\12\52\1\0\4\52"+
    "\20\56\1\363\22\56\12\52\1\0\4\52\14\54\1\375"+
    "\26\54\12\52\1\0\4\52\14\56\1\376\26\56\12\52"+
    "\1\0\4\52\25\56\1\377\15\56\12\52\1\0\4\52"+
    "\23\54\1\301\17\54\12\52\1\0\4\52\6\54\1\172"+
    "\34\54\12\52\1\0\4\52\5\54\1\u0100\35\54\12\52"+
    "\1\0\4\52\6\54\1\301\34\54\12\52\1\0\4\52"+
    "\13\56\1\u0101\27\56\12\52\1\0\4\52\41\56\1\u0102"+
    "\1\56\12\52\1\0\4\52\6\56\1\371\34\56\12\52"+
    "\1\0\4\52\11\56\1\371\31\56\12\52\1\0\4\52"+
    "\35\54\1\u0103\5\54\12\52\1\0\4\52\5\54\1\u0104"+
    "\27\54\1\u0105\5\54\12\52\1\0\4\52\10\56\1\u0106"+
    "\32\56\12\52\5\0\7\11\1\u0107\33\11\17\0\13\11"+
    "\1\u0108\27\11\17\0\5\11\1\343\35\11\17\0\7\7"+
    "\1\u0109\33\7\17\0\13\7\1\u010a\27\7\17\0\11\11"+
    "\1\u010b\31\11\17\0\13\7\1\u010c\27\7\17\0\13\11"+
    "\1\u010d\27\11\17\0\17\7\1\u010e\23\7\17\0\13\7"+
    "\1\u010f\27\7\17\0\7\7\1\u0110\33\7\17\0\17\7"+
    "\1\242\23\7\17\0\17\11\1\244\23\11\17\0\41\11"+
    "\1\u0111\1\11\17\0\13\7\1\u0112\27\7\17\0\25\11"+
    "\1\u0113\15\11\17\0\7\7\1\u0114\33\7\17\0\16\7"+
    "\1\u0115\24\7\17\0\7\7\1\u0116\33\7\17\0\5\11"+
    "\1\353\35\11\13\0\4\52\7\56\1\u0117\33\56\12\52"+
    "\1\0\4\52\13\56\1\u0118\27\56\12\52\1\0\4\52"+
    "\5\56\1\371\35\56\12\52\1\0\4\52\7\54\1\u0119"+
    "\33\54\12\52\1\0\4\52\13\54\1\u011a\27\54\12\52"+
    "\1\0\4\52\11\56\1\u011b\31\56\12\52\1\0\4\52"+
    "\13\54\1\u011c\27\54\12\52\1\0\4\52\13\56\1\u011d"+
    "\27\56\12\52\1\0\4\52\17\54\1\u011e\23\54\12\52"+
    "\1\0\4\52\13\54\1\u011f\27\54\12\52\1\0\4\52"+
    "\7\54\1\u0120\33\54\12\52\1\0\4\52\17\54\1\304"+
    "\23\54\12\52\1\0\4\52\17\56\1\306\23\56\12\52"+
    "\1\0\4\52\41\56\1\u0121\1\56\12\52\1\0\4\52"+
    "\13\54\1\u0122\27\54\12\52\1\0\4\52\25\56\1\u0123"+
    "\15\56\12\52\1\0\4\52\7\54\1\u0124\33\54\12\52"+
    "\1\0\4\52\16\54\1\u0125\24\54\12\52\1\0\4\52"+
    "\7\54\1\u0126\33\54\12\52\1\0\4\52\5\56\1\u0101"+
    "\35\56\12\52\5\0\30\11\1\262\12\11\17\0\5\11"+
    "\1\u0127\35\11\17\0\35\7\1\u0128\5\7\17\0\26\7"+
    "\1\127\14\7\17\0\13\11\1\264\27\11\17\0\20\7"+
    "\1\u010f\22\7\17\0\20\11\1\u0129\22\11\17\0\16\7"+
    "\1\u012a\24\7\17\0\10\7\1\237\32\7\17\0\14\7"+
    "\1\130\26\7\17\0\13\11\1\u012b\27\11\17\0\10\7"+
    "\1\u012c\32\7\17\0\10\11\1\u012d\32\11\17\0\17\7"+
    "\1\u012e\23\7\17\0\30\7\1\u012f\12\7\17\0\23\7"+
    "\1\242\17\7\13\0\4\52\30\56\1\324\12\56\12\52"+
    "\1\0\4\52\5\56\1\u0130\35\56\12\52\1\0\4\52"+
    "\35\54\1\u0131\5\54\12\52\1\0\4\52\26\54\1\172"+
    "\14\54\12\52\1\0\4\52\13\56\1\326\27\56\12\52"+
    "\1\0\4\52\20\54\1\u011f\22\54\12\52\1\0\4\52"+
    "\20\56\1\u0132\22\56\12\52\1\0\4\52\16\54\1\u0133"+
    "\24\54\12\52\1\0\4\52\10\54\1\301\32\54\12\52"+
    "\1\0\4\52\14\54\1\173\26\54\12\52\1\0\4\52"+
    "\13\56\1\u0134\27\56\12\52\1\0\4\52\10\54\1\u0135"+
    "\32\54\12\52\1\0\4\52\10\56\1\u0136\32\56\12\52"+
    "\1\0\4\52\17\54\1\u0137\23\54\12\52\1\0\4\52"+
    "\30\54\1\u0138\12\54\12\52\1\0\4\52\23\54\1\304"+
    "\17\54\12\52\5\0\33\11\1\353\7\11\17\0\13\7"+
    "\1\u0139\27\7\17\0\10\11\1\343\32\11\17\0\11\7"+
    "\1\u013a\31\7\17\0\10\11\1\u013b\32\11\17\0\5\7"+
    "\1\130\35\7\17\0\7\11\1\u013c\33\11\17\0\13\7"+
    "\1\u013d\27\7\17\0\16\7\1\u013e\24\7\13\0\4\52"+
    "\33\56\1\u0101\7\56\12\52\1\0\4\52\13\54\1\u013f"+
    "\27\54\12\52\1\0\4\52\10\56\1\371\32\56\12\52"+
    "\1\0\4\52\11\54\1\u0140\31\54\12\52\1\0\4\52"+
    "\10\56\1\u0141\32\56\12\52\1\0\4\52\5\54\1\173"+
    "\35\54\12\52\1\0\4\52\7\56\1\u0142\33\56\12\52"+
    "\1\0\4\52\13\54\1\u0143\27\54\12\52\1\0\4\52"+
    "\16\54\1\u0144\24\54\12\52\5\0\6\7\1\130\34\7"+
    "\17\0\33\7\1\130\7\7\17\0\5\11\1\u0145\35\11"+
    "\17\0\30\11\1\u0145\12\11\17\0\23\7\1\u0146\17\7"+
    "\17\0\17\7\1\130\23\7\13\0\4\52\6\54\1\173"+
    "\34\54\12\52\1\0\4\52\33\54\1\173\7\54\12\52"+
    "\1\0\4\52\5\56\1\u0147\35\56\12\52\1\0\4\52"+
    "\30\56\1\u0147\12\56\12\52\1\0\4\52\23\54\1\u0148"+
    "\17\54\12\52\1\0\4\52\17\54\1\173\23\54\12\52"+
    "\5\0\20\11\1\u0149\22\11\17\0\11\7\1\234\31\7"+
    "\13\0\4\52\20\56\1\u014a\22\56\12\52\1\0\4\52"+
    "\11\54\1\276\31\54\12\52\5\0\5\11\1\u014b\35\11"+
    "\13\0\4\52\5\56\1\u014c\35\56\12\52\5\0\7\11"+
    "\1\u014d\33\11\13\0\4\52\7\56\1\u014e\33\56\12\52"+
    "\5\0\16\11\1\u014f\24\11\13\0\4\52\16\56\1\u0150"+
    "\24\56\12\52\5\0\10\11\1\353\32\11\13\0\4\52"+
    "\10\56\1\u0101\32\56\12\52\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\33\1\10\11\2\0\107\1\2\11"+
    "\43\1\1\11\272\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
	
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return symbol(sym.NUMERO);
          }
        case 19: break;
        case 13: 
          { return symbol(sym.VIR);
          }
        case 20: break;
        case 18: 
          { return symbol(sym.TYPE, new String(yytext()));
          }
        case 21: break;
        case 8: 
          { return symbol(sym.QUADRAPERTA);
          }
        case 22: break;
        case 11: 
          { return symbol(sym.PT);
          }
        case 23: break;
        case 14: 
          { return symbol(sym.KEYWORD, new String(yytext()));
          }
        case 24: break;
        case 17: 
          { yybegin(YYINITIAL);
          }
        case 25: break;
        case 7: 
          { return symbol(sym.GRAFFAPERTA);
          }
        case 26: break;
        case 16: 
          { yybegin(comment);
          }
        case 27: break;
        case 3: 
          { return symbol(sym.ATOMO, new String(yytext()));
          }
        case 28: break;
        case 12: 
          { return symbol(sym.PTVIR);
          }
        case 29: break;
        case 4: 
          { return symbol(sym.PLAIN_TEXT, new String(yytext()));
          }
        case 30: break;
        case 6: 
          { return symbol(sym.GRAFFACHIUSA);
          }
        case 31: break;
        case 1: 
          { ;
          }
        case 32: break;
        case 15: 
          { return symbol(sym.ATTRIBUZIONE, new String("::"));
          }
        case 33: break;
        case 9: 
          { return symbol(sym.QUADRACHIUSA);
          }
        case 34: break;
        case 5: 
          { return symbol(sym.MY_TYPE, new String(yytext()));
          }
        case 35: break;
        case 10: 
          { return symbol(sym.OR);
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
