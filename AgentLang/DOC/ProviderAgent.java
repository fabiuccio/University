package HelloSociety;

import jade.core.Agent;
import jade.core.AID;
import jade.core.behaviours.*;

import jade.content.lang.Codec;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;


/**
 * 
 * Questo agente è stato generato automaticamente
 * dalle specifiche dettate dal linguaggio ad agenti
 * di Alessandro e Fabio.
 *
 **/

public class ProviderAgent extends Agent{
    
    private int attribute1;
    private char attribute2;
    private String attribute3;
    private MioTipo attribute4;
    
    protected void setup(){
        //Automatically created code. Do not touch it if not strictly necessary
        addBehaviour(new wait_for_communications_role(this));
     
        //Initialize attributes here...
        
    }
    
    /**
     *
     *   Questo è un ruolo creato appositamente per prova. 
     *   E' composto principalmente da due diversi task, ognuno dei
     *   quali si occupa di restare in ascolto per una comunicazione diversa.
     *   Sono previsti due task, in cui il primo si occupa di restare in ascolto per
     *   degli agenti client e uno per degli agenti standard.
     *
     ***/
    protected class wait_for_communications_role extends OneShotBehaviour{
    
        public wait_for_communications_role(Agent aref){
            //Automatically created code. Do not touch it if not strictly necessary
            super(aref);
            
            //Insert initialization code for this role here...
        }
        public void action(){
            myAgent.addBehaviour(new listen_for_clients(myAgent, "111982732"));
            myAgent.addBehaviour(new listen_for_answer(myAgent, "111982731"));
        }
                
    }
    
    protected class listen_for_clients extends CyclicBehaviour {
         private ACLMessage inMessage;
         private MessageTemplate filter;
         private String conversationID;

         public listen_for_clients(Agent aref, String conversationID){
            //Automatically created code. Do not touch it if not strictly necessary
            super(aref);
            this.conversationID = conversationID;
            
            //Insert initialization code for this task here...
         }
         
         public void action(){
            filter = MessageTemplate.and(MessageTemplate.MatchPerformative(ACLMessage.REQUEST) ,
                                         MessageTemplate.MatchConversationId(conversationID));
            
            inMessage = myAgent.receive(filter);
             
            if(inMessage!= null) {
                switch(inMessage.getPerformative()){
                    case ACLMessage.REQUEST :
                         // Insert answer to REQUEST code here
                        break;
                     
                    case ACLMessage.QUERY_REF : 
                         // Insert answer to QUERY_REF code here
                         break;
                         
                    default :
                        // Insert default answer code here
                        break;
                 }
             }
             else{
                 block();
             }
         }
     }
    
    protected class listen_for_answer extends CyclicBehaviour {
         private ACLMessage inMessage;
         private MessageTemplate filter;
         private String conversationID;

         public listen_for_answer(Agent aref, String conversationID){
            //Automatically created code. Do not touch it if not strictly necessary
            super(aref);
            this.conversationID = conversationID;
            
            //Insert initialization code for this task here...
         }
         
         public void action(){
            filter = MessageTemplate.and(MessageTemplate.MatchPerformative(ACLMessage.CFP) ,
                                         MessageTemplate.MatchConversationId(conversationID));
            
            inMessage = myAgent.receive(filter);
             
            if(inMessage!= null) {
                switch(inMessage.getPerformative()){
                    case ACLMessage.ACCEPT_PROPOSAL :
                         // Insert answer to ACCEPT_PROPOSAL code here
                        break;
                     
                    case ACLMessage.REJECT_PROPOSAL: 
                         // Insert answer to REJECT_PROPOSAL code here
                         break;
                         
                    default :
                        // Insert default answer code here
                        break;
                 }
             }
             else{
                 block();
             }
         }
     }
    
    /**
     * This code will NOT be automatically generated by the parser. It's up to the user providing
     * the own attributes types.
     */
    private class MioTipo {
        
    }
}
